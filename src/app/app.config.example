import { Inject, Injectable } from '@angular/core';
import { Http } from '@angular/http';
import { Observable } from 'rxjs/Rx';

import { environment } from './config/env';

@Injectable()
export class AppConfig {

    private config: Object = null;
    private env;

    constructor(private http: Http) {
      this.env = environment;
    }

    /**
     * Use to get the data found in the second file (config file)
     */
    public getConfig(key: any) {
      return this.config[key];
    }

    /**
     * Use to get the data found in the first file (env file)
     */
    public getEnv(key: any) {
      return this.env[key];
    }

    get(key: any) {
      return this.config[key];
    }

    /**
     * This method:
     *   a) Loads "env.json" to get the current working environment (e.g.: 'production', 'development')
     *   b) Loads "config.[env].json" to get all env's variables (e.g.: 'config.development.json')
     */
    // public load() {
    //   return new Promise((resolve, reject) => {
    //     this.http.get('env.json').map( res => res.json() )
    //       .catch((error: any):any => {
    //         console.log('Configuration file "env.json" could not be read');
    //         resolve(true);
    //         return Observable.throw(error.json().error || 'Server error');
    //       })
    //       .subscribe( (envResponse) => {
    //         this.env = envResponse;
    //         let request:any = null;

    //         this.http.get(`config.${envResponse.env}.json`)
    //           .map( res => res.json() )
    //           .catch((error: any) => {
    //             console.error('Error reading ' + envResponse.env + ' configuration file');
    //             resolve(error);
    //             return Observable.throw(error.json().error || 'Server error');
    //           })
    //           .subscribe((responseData) => {
    //             this.config = responseData;
    //             resolve(true);
    //           });
    //       });

    //   });
    // }
}
